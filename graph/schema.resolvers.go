package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"github.com/dracuxan/job-listing-api/controllers"
	"github.com/dracuxan/job-listing-api/graph/model"
)

var db = controllers.Connect()

// CreateJobListing is the resolver for the createJobListing field.
func (r *mutationResolver) CreateJobListing(ctx context.Context, input model.CreateJobListingInput) (*model.JobListing, error) {
	jobListing, err := db.CreateJobListing(input)
	if err != nil {
		return nil, fmt.Errorf("failed to create job listing: %w", err)
	}
	return jobListing, nil
}

// UpdateJobListing is the resolver for the updateJobListing field.
func (r *mutationResolver) UpdateJobListing(ctx context.Context, id string, input model.UpdateJobListingInput) (*model.JobListing, error) {
	updatedJobListing, err := db.UpdateJobListing(id, input)
	if err != nil {
		return nil, fmt.Errorf("failed to update job listing with ID %s: %w", id, err)
	}
	return updatedJobListing, nil
}

// DeleteJobListing is the resolver for the deleteJobListing field.
func (r *mutationResolver) DeleteJobListing(ctx context.Context, id string) (*model.DeleteJobListingResponse, error) {
	deletedJobListing, err := db.DeleteJobListing(id)
	if err != nil {
		return nil, fmt.Errorf("failed to delete job listing with ID %s: %w", id, err)
	}
	return deletedJobListing, nil
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context) ([]*model.JobListing, error) {
	jobListings, err := db.GetJobs()
	if err != nil {
		return nil, fmt.Errorf("failed to fetch job listings: %w", err)
	}
	return jobListings, nil
}

// Job is the resolver for the job field.
func (r *queryResolver) Job(ctx context.Context, id *string) (*model.JobListing, error) {
	if id == nil {
		return nil, fmt.Errorf("job ID is required")
	}
	jobListing, err := db.GetJob(*id)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch job listing with ID %s: %w", *id, err)
	}
	return jobListing, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
